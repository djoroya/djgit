{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"__init__/","text":"__init__ \u00b6 Source: __init__.py Auto-generated by py2md_docs.py .","title":"  Init  "},{"location":"__init__/#__init__","text":"Source: __init__.py Auto-generated by py2md_docs.py .","title":"__init__"},{"location":"addpath/","text":"addpath \u00b6 Source: addpath.py Functions \u00b6 addpath() -> None \u00b6 from addpath.addpath import addpath Main function that parses command-line arguments and calls addpath_python() with the provided path. addpath_python(path) -> None \u00b6 from addpath.addpath_python import addpath_python Adds a custom path to Python's search path ( sys.path ) by creating or updating a .pth file inside the active environment's site-packages directory. This allows modules in non-standard locations to be imported without setting environment variables every session. Section Description Inputs --path ( str ): Absolute or relative path to add to the PYTHONPATH. Outputs None (prints status messages to stdout and updates the conda.pth file). The .pth file is created in the first site-packages found in sys.path . If the path already exists in the file, it will not be duplicated. Example usage: djgit_addpath --path /path/to/my/path Auto-generated by py2md_docs.py .","title":"Addpath"},{"location":"addpath/#addpath","text":"Source: addpath.py","title":"addpath"},{"location":"addpath/#functions","text":"","title":"Functions"},{"location":"addpath/#addpath-none","text":"from addpath.addpath import addpath Main function that parses command-line arguments and calls addpath_python() with the provided path.","title":"addpath() -&gt; None"},{"location":"addpath/#addpath_pythonpath-none","text":"from addpath.addpath_python import addpath_python Adds a custom path to Python's search path ( sys.path ) by creating or updating a .pth file inside the active environment's site-packages directory. This allows modules in non-standard locations to be imported without setting environment variables every session. Section Description Inputs --path ( str ): Absolute or relative path to add to the PYTHONPATH. Outputs None (prints status messages to stdout and updates the conda.pth file). The .pth file is created in the first site-packages found in sys.path . If the path already exists in the file, it will not be duplicated. Example usage: djgit_addpath --path /path/to/my/path Auto-generated by py2md_docs.py .","title":"addpath_python(path) -&gt; None"},{"location":"copylibs/","text":"copylibs \u00b6 Source: copylibs.py Functions \u00b6 main() \u00b6 from copylibs.main import main Creates a timestamped snapshot of the current project by freezing dependencies, separating VCS-based packages from standard ones, vendoring importable VCS modules for pruning, and copying the working tree into .copylibs/ . Temporary files are cleaned up, and a consolidated requirements.txt is written inside the snapshot. Section Description Inputs None Outputs str : Path to the created snapshot directory (e.g., .copylibs/2025-08-10-12-34-56 ). Side effects include writing a cleaned requirements.txt inside the snapshot, creating/removing temporary files ( requirements_temp*.txt ), and creating/removing the dependencies folder. Runs pip freeze via os.system ; requires pip available on PATH . Overwrites temporary files and deletes the dependencies directory if it exists. Import errors for VCS modules are caught and printed; those modules are skipped. Prunes lammps (for modules containing djlmp ) and simulations (for modules containing runstep ) after vendoring. File operations may raise OSError or shutil.Error depending on permissions and filesystem state. Example usage: djgit_copylibs Auto-generated by py2md_docs.py .","title":"Copylibs"},{"location":"copylibs/#copylibs","text":"Source: copylibs.py","title":"copylibs"},{"location":"copylibs/#functions","text":"","title":"Functions"},{"location":"copylibs/#main","text":"from copylibs.main import main Creates a timestamped snapshot of the current project by freezing dependencies, separating VCS-based packages from standard ones, vendoring importable VCS modules for pruning, and copying the working tree into .copylibs/ . Temporary files are cleaned up, and a consolidated requirements.txt is written inside the snapshot. Section Description Inputs None Outputs str : Path to the created snapshot directory (e.g., .copylibs/2025-08-10-12-34-56 ). Side effects include writing a cleaned requirements.txt inside the snapshot, creating/removing temporary files ( requirements_temp*.txt ), and creating/removing the dependencies folder. Runs pip freeze via os.system ; requires pip available on PATH . Overwrites temporary files and deletes the dependencies directory if it exists. Import errors for VCS modules are caught and printed; those modules are skipped. Prunes lammps (for modules containing djlmp ) and simulations (for modules containing runstep ) after vendoring. File operations may raise OSError or shutil.Error depending on permissions and filesystem state. Example usage: djgit_copylibs Auto-generated by py2md_docs.py .","title":"main()"},{"location":"deploy/","text":"deploy \u00b6 Source: deploy.py Functions \u00b6 deploy(target_folder, package_data={}) \u00b6 from deploy.deploy import deploy Auto-generated by py2md_docs.py .","title":"Deploy"},{"location":"deploy/#deploy","text":"Source: deploy.py","title":"deploy"},{"location":"deploy/#functions","text":"","title":"Functions"},{"location":"deploy/#deploytarget_folder-package_data","text":"from deploy.deploy import deploy Auto-generated by py2md_docs.py .","title":"deploy(target_folder, package_data={})"},{"location":"npm_deploy/","text":"npm_deploy \u00b6 Source: npm_deploy.py Functions \u00b6 create_package_json(path, repo_name, target_path='.repo_deploy') \u00b6 from npm_deploy.create_package_json import create_package_json npm_deploy() \u00b6 from npm_deploy.npm_deploy import npm_deploy Auto-generated by py2md_docs.py .","title":"Npm Deploy"},{"location":"npm_deploy/#npm_deploy","text":"Source: npm_deploy.py","title":"npm_deploy"},{"location":"npm_deploy/#functions","text":"","title":"Functions"},{"location":"npm_deploy/#create_package_jsonpath-repo_name-target_pathrepo_deploy","text":"from npm_deploy.create_package_json import create_package_json","title":"create_package_json(path, repo_name, target_path='.repo_deploy')"},{"location":"npm_deploy/#npm_deploy_1","text":"from npm_deploy.npm_deploy import npm_deploy Auto-generated by py2md_docs.py .","title":"npm_deploy()"},{"location":"py2md_docs/","text":"py2md_docs \u00b6 Source: py2md_docs.py Overview \u00b6 py2md_docs.py 1) Recorre un \u00e1rbol de Python y genera Markdown por m\u00f3dulo. 2) Actualiza autom\u00e1ticamente mkdocs.yml para incluir la referencia generada. Uso: python tools/py2md_docs.py --src src --out docs/reference --mkdocs mkdocs.yml --section \"Referencia\" --group \"API\" --include-comments Classes \u00b6 ClassDoc \u00b6 FunctionDoc \u00b6 ModuleDoc \u00b6 Functions \u00b6 generate_docs(src_dir, out_dir, include_comments, mirror_tree) -> List[Path] \u00b6 from py2md_docs.generate_docs import generate_docs main() \u00b6 from py2md_docs.main import main md_for_module(m, include_comments=False) -> str \u00b6 from py2md_docs.md_for_module import md_for_module parse_module(py_path, src_root) -> ModuleDoc \u00b6 from py2md_docs.parse_module import parse_module update_mkdocs_yaml(mkdocs_path, docs_root, md_files, top_section='Referencia', subgroup='API') -> None \u00b6 from py2md_docs.update_mkdocs_yaml import update_mkdocs_yaml Auto-generated by py2md_docs.py .","title":"Py2Md Docs"},{"location":"py2md_docs/#py2md_docs","text":"Source: py2md_docs.py","title":"py2md_docs"},{"location":"py2md_docs/#overview","text":"py2md_docs.py 1) Recorre un \u00e1rbol de Python y genera Markdown por m\u00f3dulo. 2) Actualiza autom\u00e1ticamente mkdocs.yml para incluir la referencia generada. Uso: python tools/py2md_docs.py --src src --out docs/reference --mkdocs mkdocs.yml --section \"Referencia\" --group \"API\" --include-comments","title":"Overview"},{"location":"py2md_docs/#classes","text":"","title":"Classes"},{"location":"py2md_docs/#classdoc","text":"","title":"ClassDoc"},{"location":"py2md_docs/#functiondoc","text":"","title":"FunctionDoc"},{"location":"py2md_docs/#moduledoc","text":"","title":"ModuleDoc"},{"location":"py2md_docs/#functions","text":"","title":"Functions"},{"location":"py2md_docs/#generate_docssrc_dir-out_dir-include_comments-mirror_tree-listpath","text":"from py2md_docs.generate_docs import generate_docs","title":"generate_docs(src_dir, out_dir, include_comments, mirror_tree) -&gt; List[Path]"},{"location":"py2md_docs/#main","text":"from py2md_docs.main import main","title":"main()"},{"location":"py2md_docs/#md_for_modulem-include_commentsfalse-str","text":"from py2md_docs.md_for_module import md_for_module","title":"md_for_module(m, include_comments=False) -&gt; str"},{"location":"py2md_docs/#parse_modulepy_path-src_root-moduledoc","text":"from py2md_docs.parse_module import parse_module","title":"parse_module(py_path, src_root) -&gt; ModuleDoc"},{"location":"py2md_docs/#update_mkdocs_yamlmkdocs_path-docs_root-md_files-top_sectionreferencia-subgroupapi-none","text":"from py2md_docs.update_mkdocs_yaml import update_mkdocs_yaml Auto-generated by py2md_docs.py .","title":"update_mkdocs_yaml(mkdocs_path, docs_root, md_files, top_section='Referencia', subgroup='API') -&gt; None"},{"location":"tools/","text":"tools \u00b6 Source: tools.py Functions \u00b6 clonar_deploy_branch(repo_url) \u00b6 from tools.clonar_deploy_branch import clonar_deploy_branch create_deploy_branch(repo_url) \u00b6 from tools.create_deploy_branch import create_deploy_branch createsetup(repo_name, package_data={}) \u00b6 from tools.createsetup import createsetup get_repo_name() \u00b6 from tools.get_repo_name import get_repo_name list_remote_branches(repo_url) \u00b6 from tools.list_remote_branches import list_remote_branches Auto-generated by py2md_docs.py .","title":"Tools"},{"location":"tools/#tools","text":"Source: tools.py","title":"tools"},{"location":"tools/#functions","text":"","title":"Functions"},{"location":"tools/#clonar_deploy_branchrepo_url","text":"from tools.clonar_deploy_branch import clonar_deploy_branch","title":"clonar_deploy_branch(repo_url)"},{"location":"tools/#create_deploy_branchrepo_url","text":"from tools.create_deploy_branch import create_deploy_branch","title":"create_deploy_branch(repo_url)"},{"location":"tools/#createsetuprepo_name-package_data","text":"from tools.createsetup import createsetup","title":"createsetup(repo_name, package_data={})"},{"location":"tools/#get_repo_name","text":"from tools.get_repo_name import get_repo_name","title":"get_repo_name()"},{"location":"tools/#list_remote_branchesrepo_url","text":"from tools.list_remote_branches import list_remote_branches Auto-generated by py2md_docs.py .","title":"list_remote_branches(repo_url)"}]}